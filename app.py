# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Oj3dKs7KQM9LHoXZkiJcy89t1Sa3uHS2
"""

# build_ai_model.py

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
iris = load_iris()
X, y = iris.data, iris.target

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = DecisionTreeClassifier()
model.fit(X_train, y_train)

# Predict & Evaluate
y_pred = model.predict(X_test)
print("Classification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=iris.target_names, yticklabels=iris.target_names)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Visualize Tree
plt.figure(figsize=(10,6))
plot_tree(model, feature_names=iris.feature_names, class_names=iris.target_names, filled=True)
plt.show()

import streamlit as st
from sklearn.datasets import load_iris
from sklearn.tree import DecisionTreeClassifier
import numpy as np

# Load data & train model
iris = load_iris()
X, y = iris.data, iris.target
model = DecisionTreeClassifier()
model.fit(X, y)

# Streamlit UI
st.title("ðŸŒ¸ Iris Species Predictor")
st.markdown("Give flower measurements and we'll predict the species!")

sepal_length = st.slider('Sepal length (cm)', 4.0, 8.0, 5.0)
sepal_width  = st.slider('Sepal width (cm)', 2.0, 4.5, 3.0)
petal_length = st.slider('Petal length (cm)', 1.0, 7.0, 4.0)
petal_width  = st.slider('Petal width (cm)', 0.1, 2.5, 1.0)

input_data = np.array([[sepal_length, sepal_width, petal_length, petal_width]])
prediction = model.predict(input_data)
species = iris.target_names[prediction[0]]

st.success(f"ðŸŒ¼ Predicted Species: **{species}**")

